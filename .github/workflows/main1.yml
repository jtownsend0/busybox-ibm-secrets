name: Build and Deploy to IKS

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:  # Allows manual triggering of the workflow

env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: busybox
  IKS_CLUSTER: mycluster-us-south-1-bx2.4x16
  DEPLOYMENT_NAME: my-deployment
  POD_NAME: my-pod
  SECRET_ID: ${{ secrets.SECRET_ID }}
  SECRETS_MANAGER_URL: ${{ secrets.SECRETS_MANAGER_URL }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Download and Install IBM Cloud CLI and Plugins
    - name: Install IBM Cloud CLI and Plugins
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry
        ibmcloud plugin install -f secrets-manager
        sudo apt-get update && sudo apt-get install -y jq

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Log in to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build the Docker image
    - name: Build with Docker
      run: |
        docker build -t $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA .

    # Push the image to GitHub Container Registry
    - name: Push the image to GHCR
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA

    # Retrieve secret and extract fields
    - name: Retrieve secret and extract fields
      run: |
        ibmcloud login --apikey ${{ secrets.IBM_CLOUD_API_KEY }} --no-region
        secret=$(ibmcloud secrets-manager secret get --id ${{ secrets.SECRET_ID }} --service-url ${{ secrets.SECRETS_MANAGER_URL }} --output json)
        echo "Retrieved secret JSON: $secret"
        username=$(echo $secret | jq -r '.username')
        password=$(echo $secret | jq -r '.password')
        escaped_username=$(printf '%s\n' "$username" | sed 's/["\\]/\\&/g')
        escaped_password=$(printf '%s\n' "$password" | sed 's/["\\]/\\&/g')
        echo "USERNAME=${escaped_username}" >> $GITHUB_ENV
        echo "PASSWORD=${escaped_password}" >> $GITHUB_ENV
        echo "Username: $escaped_username"
        echo "Password: $escaped_password"

   
     
        printf "Creating Kubernetes secret with username: %s and password: %s\n" "${escaped_username}" "${escaped_password}"
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl delete secret my-k8s-secret --namespace=default --ignore-not-found
        kubectl create secret generic my-k8s-secret \
          --from-literal=username="${escaped_username}" \
          --from-literal=password="${escaped_password}" \
          --namespace=default

    # Configure kubectl to use the IKS cluster
    - name: Configure kubectl
      run: |
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context

    # Deploy the Pod
    - name: Deploy the Pod
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Pod
        metadata:
          name: $POD_NAME
          namespace: default
        spec:
          containers:
          - name: my-container
            image: $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA
            command: ['sh', '-c', 'echo \$USERNAME && echo \$PASSWORD && sleep 3600']
            env:
            - name: USERNAME
              valueFrom:
                secretKeyRef:
                  name: my-k8s-secret
                  key: username
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-k8s-secret
                  key: password
        EOF
